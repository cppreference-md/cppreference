---
import { codeToHtml } from "shiki";

export interface Props {
  header: string;
  content: string;
}

const { header, content } = Astro.props;

function parseDeclarations(content: string) {
  const lines = content
    .trim()
    .split("\n")
    .filter((line) => line.trim());
  const declarations: Array<{
    number: string;
    code: string;
    version?: string;
  }> = [];

  let currentDeclaration = "";
  let currentNumber = "";
  let currentVersion = "";
  let inDeclaration = false;

  for (const line of lines) {
    const trimmedLine = line.trim();

    const numberMatch = trimmedLine.match(/^\((\d+)\)(?:\s+\((.+?)\))?$/);
    if (numberMatch) {
      if (currentDeclaration && currentNumber) {
        declarations.push({
          number: currentNumber,
          code: currentDeclaration.trim(),
          version: currentVersion.replace("since ", ""),
        });
      }

      currentNumber = numberMatch[1];
      currentVersion = numberMatch[2] || "";
      currentDeclaration = "";
      inDeclaration = true;
      continue;
    }

    if (inDeclaration) {
      currentDeclaration += line + "\n";
    } else if (!currentNumber) {
      currentDeclaration += line + "\n";
      currentNumber = "1";
      inDeclaration = true;
    }
  }

  if (currentDeclaration && currentNumber) {
    declarations.push({
      number: currentNumber,
      code: currentDeclaration.trim(),
      version: currentVersion.replace("since ", ""),
    });
  }

  return declarations;
}

const declarations = parseDeclarations(content);

const highlightedDeclarations = await Promise.all(
  declarations.map(async (decl) => {
    const highlighted = await codeToHtml(decl.code, {
      lang: "cpp",
      theme: "github-dark",
      transformers: [
        {
          pre(node) {
            this.addClassToHast(node, "declaration-code");
          },
        },
      ],
    });

    return {
      ...decl,
      highlighted,
    };
  }),
);
---

<div class="declaration-table">
  <div class="declaration-header">
    Defined in header &lt;<span class="header-name">{header}</span>&gt;
  </div>

  <div class="declarations-container">
    {
      highlightedDeclarations.map((decl) => (
        <div class="declaration-row">
          <div class="declaration-content">
            <div class="declaration-code" set:html={decl.highlighted} />
          </div>
          <div class="declaration-meta">
            {decl.version && (
              <span class="declaration-version">(since {decl.version})</span>
            )}
            <span class="declaration-number">({decl.number})</span>
          </div>
        </div>
      ))
    }
  </div>
</div>

<style>
  .declaration-table {
    border: 1px solid #e1e5e9;
    border-radius: 6px;
    margin: 1.5rem 0;
    overflow: hidden;
    background: white;
  }

  .declaration-header {
    background: #f6f8fa;
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #e1e5e9;
    font-size: 0.9rem;
    color: #656d76;
  }

  .header-name {
    color: #0969da;
    font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, monospace;
  }

  .declarations-container {
    background: white;
  }

  .declaration-row {
    display: flex;
    align-items: flex-start;
    border-bottom: 1px solid #e1e5e9;
    padding: 1rem;
    gap: 1rem;
  }

  .declaration-row:last-child {
    border-bottom: none;
  }

  .declaration-content {
    flex: 1;
    min-width: 0;
  }

  .declaration-meta {
    display: flex;
    align-items: flex-end;
    gap: 0.25rem;
    flex-shrink: 0;
  }

  .declaration-number {
    font-size: 0.9rem;
    color: #656d76;
    font-weight: 500;
  }

  .declaration-version {
    font-size: 0.85rem;
    color: #1a7f37;
    background: #dafbe1;
    padding: 0.15rem 0.5rem;
    border-radius: 12px;
    white-space: nowrap;
  }

  :global(.declaration-code pre) {
    margin: 0 !important;
    padding: 0 !important;
    background: transparent !important;
    border: none !important;
    font-size: 0.9rem;
    line-height: 1.5;
  }

  :global(.declaration-code code) {
    background: transparent !important;
    padding: 0 !important;
  }

  @media (max-width: 768px) {
    .declaration-row {
      flex-direction: column;
      gap: 0.75rem;
    }

    .declaration-meta {
      flex-direction: row;
      align-items: center;
      align-self: flex-start;
    }

    .declaration-version {
      margin-left: 0.5rem;
    }
  }

  @media (prefers-color-scheme: dark) {
    .declaration-table {
      border-color: #30363d;
      background: #0d1117;
    }

    .declaration-header {
      background: #161b22;
      border-color: #30363d;
      color: #8b949e;
    }

    .header-name {
      color: #58a6ff;
    }

    .declarations-container {
      background: #0d1117;
    }

    .declaration-row {
      border-color: #21262d;
    }

    .declaration-number {
      color: #8b949e;
    }

    .declaration-version {
      color: #238636;
      background: #1a2e1a;
    }
  }
</style>
